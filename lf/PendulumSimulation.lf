target C {
    files: [
        "../impl/simulation.h",
        "../impl/simulation.c",
        "../impl/behavior.h",
        "../impl/behavior.c"
    ],
    cmake-include: [
        "../impl/simulation.cmake",
        "../impl/behavior.cmake"
    ]
}

/**
 * This reactor provides a simple simulation environment for the
 * Furuta pendulum.
 * 
 * The simulation logic is factored out (impl/simulation.c) and 
 * is based on a Ptolemy II model constructed by Johan Eker and 
 * described in this paper:
 * J. Liu, J. Eker, J. W. Janneck, and E. A. Lee,
 * “Realistic simulations of embedded control systems,”
 * IFAC Proceedings Volumes, vol. 35, no. 1, pp. 391–396, 2002.
 *
 * Original adaption to C and LF by Edward A. Lee, see:
 * https://github.com/lf-lang/examples-lingua-franca/tree/383e816627e2668330df3dfc08e7f4202461f42c/C/src/modal_models/FurutaPendulum
 *
 * It uses a simple forward-Euler simulation.
 * The Ptolemy II model is more accurate because it uses an
 * RK-45 solver.
 * 
 * This model outputs its state every `sample_period`.
 * It updates the state before outputting it using the most 
 * recently received control input, except on the first input, 
 * where it just outputs the initial state.
 * 
 * The `theta` output is the angle of the pendulum, which is 0
 * when the pendulum is pointing straight up, and `d_theta` is 
 * its initial angular velocity. The `phi` output is the angle 
 * of the horizontal arm and `d_phi` is its angular velocity.
 * 
 * @author Edward A. Lee
 * @author Alexander Schulz-Rosengarten
 */
reactor PendulumSimulation(
    initial_theta:double(-3.14159), // Initial pendulum angle.
    sample_period:time(5 msec), // Update frequency.
    speed:double(1) // Can be used to run the simulation in slow-motion.
){
    input control:double; // Control input.
    input disturbance:double; // Positional manipulation by the user.
    
    output theta:double; // Pendulum angle.
    output d_theta:double; // Pendulum angular velocity.
    output phi:double; // Arm angle.
    output d_phi:double; // Arm angular velocity.
    
    state pendulum_state:double[4](0.0, 0.0, 0.0, 0.0); // Internal state of the pendulum.
    state first:bool(true); // Flag for first sample.
    state latest_control:double(0.0); // Stores the controller response until next simulation cycle.
    
    timer t(0, sample_period);
    
    preamble {=
        #include "simulation.h"
    =}
    
    reaction(disturbance) {=
        // Apply disturbance directly to pendulum angle
        self->pendulum_state[0] += disturbance->value;
    =}
    
    reaction(t) -> theta, d_theta, phi, d_phi {=
        // Simulate
        if (!self->first) {
            simulate(self->pendulum_state, self->sample_period * self->speed, self->latest_control);
        } else {
            self->pendulum_state[0] = self->initial_theta;
            self->first = false;
        }
        
        // Output the state.
        lf_set(theta, self->pendulum_state[0]);
        lf_set(d_theta, self->pendulum_state[1]);
        lf_set(phi, self->pendulum_state[2]);
        lf_set(d_phi, self->pendulum_state[3]);
    =}

    reaction(control) {=
        // Store controller response
        self->latest_control = control->value;
    =}
}

/**
 * Computes the energy based on the given angle using
 * the implementation in "behavior.c".
 * 
 * @author Edward A. Lee
 * @author Alexander Schulz-Rosengarten
 */
reactor PendulumEnergy {
    input theta:double;
    input d_theta:double;
    
    output energy:double;
    
    preamble {=
        #include "behavior.h"
    =}
    
    reaction(theta, d_theta) -> energy {=
        double r_theta = restrict_angle(theta->value);
        double e = get_energy(d_theta->value, r_theta);
        lf_set(energy, e);
    =}
}
